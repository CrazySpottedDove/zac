name: Rust Multi-Platform Build/master

on:
  push:
    # 仅在推送符合 v*.*.* 格式的新标签时触发
    tags: [ 'v*.*.*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # 确保标签对应的提交来自 master
  check-master:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure tag commit is on master
        run: |
          git fetch origin master
          if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/master)" ]; then
            echo "Tag commit is not on master. Exiting."
            exit 0
          fi
  build-macos:
    name: Build for macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add macOS targets
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin
      - name: Build macOS binaries
        run: |
          cargo build --release --target aarch64-apple-darwin
          cargo build --release --target x86_64-apple-darwin
      - name: Upload macOS binaries
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            target/aarch64-apple-darwin/release/zac
            target/x86_64-apple-darwin/release/zac

  build-windows:
    name: Build for Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add Windows target
        run: rustup target add x86_64-pc-windows-msvc
      - name: Build Windows binaries
        run: |
          cargo build --release --target x86_64-pc-windows-msvc
      - name: Upload Windows binaries
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            target/x86_64-pc-windows-msvc/release/zac.exe

  build-linux:
    name: Build for Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add Linux target
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Build Linux binaries
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
      - name: Upload Linux binaries
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            target/x86_64-unknown-linux-gnu/release/zac

  release:
    name: Create & Upload Release
    runs-on: ubuntu-latest
    # 等 macOS、Windows、Linux 三平台构建完成后再执行
    needs: [build-macos, build-windows, build-linux]

    steps:
      - uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-binaries
          path: macos

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries
          path: linux

      - name: Check for existing tag
        run: |
          if git rev-parse "refs/tags/${{ github.ref }}" >/dev/null 2>&1; then
            git tag -d ${{ github.ref }}
            git push origin :refs/tags/${{ github.ref }}
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: "请根据自己的平台下载对应的二进制文件。下载后，请自行修改文件名称为 zac。"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS (arm64) zac
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos/aarch64-apple-darwin/release/zac
          asset_name: zac-${{ github.ref_name }}-macos-arm64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS (x86_64) zac
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos/x86_64-apple-darwin/release/zac
          asset_name: zac-${{ github.ref_name }}-macos-x86_64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows zac
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows/zac.exe
          asset_name: zac-${{ github.ref_name }}-windows-x86_64.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux zac
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux/zac
          asset_name: zac-${{ github.ref_name }}-linux-x86_64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}